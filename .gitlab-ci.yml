image: docker:19.03.15

stages:
  - test
  - sonar
  - build_image
  - push_image
  - push_image_release
  - deploy_dev
  - deploy_qa
  - deploy_stg
  - deploy_prod

variables:
  SERVICE_NAME: backoffice-service
  EKS_NAMESPACE: default
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  ALB_LOG_ACCESS_BUCKET: dale-monitoreo-alb-access-logs-740ff91e339bf141

before_script:
  - export CONTAINER_IMAGE=$DEVOPS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$SERVICE_NAME
  - export VERSION=${CI_COMMIT_SHORT_SHA}
  - export RELEASE=$(echo ${CI_COMMIT_REF_NAME} | sed "s/\//_/g")
  - apk update && apk add bash
  - apk update && apk add openssl
  - apk update && apk add jq
  - export JSON_ASSUME_FILE_CI_CD=assume-role-ci-cd.json

Test:
  tags:
    - dale-devops-gitlab-runner
  stage: test
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
  image: node:18-alpine
  script:
    - apk --no-cache add python3 py3-pip
    - pip install pip==21.3.1
    - pip3 install pip==21.3.1
    - python -m pip install pip==21.3.1
    - python3 -m pip install pip==21.3.1
    - pip3 install --no-cache-dir --upgrade awscli
    - aws codeartifact login --tool npm --repository npm-private --domain avalsolucionesdigitales --domain-owner $DEVOPS_ACCOUNT_ID --region $AWS_DEFAULT_REGION
    - npm install
    - npm run test:cov
  artifacts:
    expire_in: 5 min
    paths: 
      - coverage/

sonarcloud-check:
  tags:
    - dale-devops-gitlab-runner
  stage: sonar
  allow_failure: false
  dependencies:
    - Test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner

build_image:
  tags:
    - dale-devops-gitlab-runner
  stage: build_image
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
          only_merge_request_event: "true"  
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ "/^fix/"
  script:
    - export AWS_ACCESS_KEY_ID=$(jq -r .AccessKeyId ${JSON_ASSUME_FILE})
    - export AWS_SECRET_ACCESS_KEY=$(jq -r .SecretAccessKey ${JSON_ASSUME_FILE})
    - export AWS_SESSION_TOKEN=$(jq -r .SessionToken ${JSON_ASSUME_FILE})
    - docker build -t $CONTAINER_IMAGE:$VERSION
      --build-arg DEVOPS_ACCOUNT_ID=$DEVOPS_ACCOUNT_ID
      --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
      --no-cache .
    - docker tag $CONTAINER_IMAGE:$VERSION $CONTAINER_IMAGE:latest
    - >
      if [ "$only_merge_request_event" == "true" ]; then
        docker rmi $CONTAINER_IMAGE:$VERSION
      fi

push_image:
  tags:
    - dale-devops-gitlab-runner
  stage: push_image
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ "/^fix/"
  script:
    - docker push $CONTAINER_IMAGE:$VERSION
    - docker push $CONTAINER_IMAGE:latest
    - docker rmi $CONTAINER_IMAGE:$VERSION
    - docker rmi $CONTAINER_IMAGE:latest
    - echo TEMP1="${VERSION}" > $CI_PROJECT_DIR/variables.env
  artifacts:
    reports:
      dotenv: variables.env

push_image_release:
  tags:
    - dale-devops-gitlab-runner
  stage: push_image_release
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ "/^release/"
  script:
    - docker pull $CONTAINER_IMAGE:$VERSION
    - docker tag $CONTAINER_IMAGE:$VERSION $CONTAINER_IMAGE:$RELEASE
    - docker push $CONTAINER_IMAGE:$RELEASE
    - docker rmi $CONTAINER_IMAGE:$VERSION
    - docker rmi $CONTAINER_IMAGE:$RELEASE

deploy_dev_backoffice:
  tags:
    - dale-devops-gitlab-runner
  stage: deploy_dev
  variables:
    APP_NAME: dale-dev-compute
    SECRET_PATH: backoffice-service/secret_config-hwsNF7
    S3_BUCKET: dale-dev-db-s3-static-content-private-backoffice-auuos49i3iuo
    DEV_CERTIFICATE_ARN: $DEV_CERTIFICATE_ARN
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
  script:
    - if [ -z "$TEMP1" ]; then echo "VERSION is empty"; VERSION="latest"; fi
    - apk add --no-cache curl jq python3 py-pip
    - pip3 install awscli
    - bash .cicd/deploy-eks.sh dev $DEV_ACCOUNT_ID $AWS_DEFAULT_REGION $APP_NAME $EKS_NAMESPACE $SERVICE_NAME .cicd/helm $CONTAINER_IMAGE $VERSION $SECRET_PATH $S3_BUCKET /health $ALB_LOG_ACCESS_BUCKET $DEV_CERTIFICATE_ARN

deploy_qa_backoffice:
  tags:
    - dale-devops-gitlab-runner
  stage: deploy_qa
  variables:
    APP_NAME: dale-qa-compute
    SECRET_PATH: backoffice-service/secret_config-kNggjj
    S3_BUCKET: dale-dev-db-s3-static-content-private-backoffice-auuos49i3iuo
    QA_CERTIFICATE_ARN: $QA_CERTIFICATE_ARN
  script:
    - echo "Deploy to qa server"
    - if [ -z "$TEMP1" ]; then echo "VERSION is empty"; VERSION="latest"; fi
    - apk add --no-cache curl jq python3 py-pip
    - pip3 install awscli
    - bash .cicd/deploy-eks.sh qa $QA_ACCOUNT_ID $AWS_DEFAULT_REGION $APP_NAME $EKS_NAMESPACE $SERVICE_NAME .cicd/helm $CONTAINER_IMAGE $CI_COMMIT_SHORT_SHA $SECRET_PATH $S3_BUCKET /health $ALB_LOG_ACCESS_BUCKET $QA_CERTIFICATE_ARN
  environment:
    name: qa
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ "/^release/"

deploy_stg_backoffice:
  tags:
    - dale-devops-gitlab-runner
  stage: deploy_stg
  variables:
    APP_NAME: dale-stg-compute
    SECRET_PATH: backoffice-service/secret_config-kx94Wg
    S3_BUCKET: dale-stg-db-s3-static-content-private-backoffice-3wblphj3k7a1
    STG_CERTIFICATE_ARN: $STG_CERTIFICATE_ARN
  script:
    - echo "Deploy to stg server"
    - if [ -z "$TEMP1" ]; then echo "VERSION is empty"; VERSION="latest"; fi
    - apk add --no-cache curl jq python3 py-pip
    - pip3 install awscli
    - bash .cicd/deploy-eks.sh stg $STG_ACCOUNT_ID $AWS_DEFAULT_REGION $APP_NAME $EKS_NAMESPACE $SERVICE_NAME .cicd/helm $CONTAINER_IMAGE $CI_COMMIT_SHORT_SHA $SECRET_PATH $S3_BUCKET /health $ALB_LOG_ACCESS_BUCKET $STG_CERTIFICATE_ARN
  environment:
    name: stg
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ "/^release/"

deploy_prod_backoffice:
  tags:
    - dale-devops-gitlab-runner
  stage: deploy_prod
  variables:
    APP_NAME: dale-prod-compute
    SECRET_PATH: backoffice-service/secret_config-0QeRfL
    S3_BUCKET: dale-prod-db-s3-static-content-private-backoffice-53ildoadx0he
    STG_CERTIFICATE_ARN: $PROD_CERTIFICATE_ARN
  script:
    - echo "Deploy to prod server"
    - if [ -z "$TEMP1" ]; then echo "VERSION is empty"; VERSION="latest"; fi
    - apk add --no-cache curl jq python3 py-pip
    - pip3 install awscli
    - bash .cicd/deploy-eks.sh prod $PROD_ACCOUNT_ID $AWS_DEFAULT_REGION $APP_NAME $EKS_NAMESPACE $SERVICE_NAME .cicd/helm $CONTAINER_IMAGE $CI_COMMIT_SHORT_SHA $SECRET_PATH $S3_BUCKET /health $ALB_LOG_ACCESS_BUCKET $PROD_CERTIFICATE_ARN
  environment:
    name: prod
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ "/^release/"
